/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = T | U extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only]
  ? Only
  : T extends [infer A, infer B, ...infer Rest]
  ? OneOf<[XOR<A, B>, ...Rest]>
  : never;

export interface paths {
  "/api/public/dataset-items": {
    /** @description Create a dataset item, upserts on id */
    post: operations["datasetItems_create"];
  };
  "/api/public/dataset-items/{id}": {
    /** @description Get a specific dataset item */
    get: operations["datasetItems_get"];
  };
  "/api/public/dataset-run-items": {
    /** @description Create a dataset run item */
    post: operations["datasetRunItems_create"];
  };
  "/api/public/datasets/{datasetName}": {
    /** @description Get a dataset and its items */
    get: operations["datasets_get"];
  };
  "/api/public/datasets": {
    /** @description Create a dataset */
    post: operations["datasets_create"];
  };
  "/api/public/datasets/{datasetName}/runs/{runName}": {
    /** @description Get a dataset run and its items */
    get: operations["datasets_getRuns"];
  };
  "/api/public/events": {
    /** @description Add an event to the database */
    post: operations["event_create"];
  };
  "/api/public/generations": {
    post: operations["generations_log"];
    patch: operations["generations_update"];
  };
  "/api/public/health": {
    /** @description Check health of API and database */
    get: operations["health_health"];
  };
  "/api/public/ingestion": {
    /** @description Ingest multiple events to Langfuse */
    post: operations["ingestion_batch"];
  };
  "/api/public/observations/{observationId}": {
    /** @description Get a specific observation */
    get: operations["observations_get"];
  };
  "/api/public/observations": {
    /** @description Get a list of observations */
    get: operations["observations_getMany"];
  };
  "/api/public/projects": {
    get: operations["projects_get"];
  };
  "/api/public/scores": {
    /** @description Get scores */
    get: operations["score_get"];
    /** @description Add a score to the database, upserts on id */
    post: operations["score_create"];
  };
  "/api/public/spans": {
    /** @description Add a span to the database */
    post: operations["span_create"];
    /** @description Update a span to the database */
    patch: operations["span_update"];
  };
  "/api/public/traces": {
    /** @description Get list of traces */
    get: operations["trace_list"];
    /** @description Add a trace to the database */
    post: operations["trace_create"];
  };
  "/api/public/traces/{traceId}": {
    /** @description Get a specific trace */
    get: operations["trace_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** CreateEventRequest */
    CreateEventRequest: {
      id?: string | null;
      traceId?: string | null;
      name?: string | null;
      /** Format: date-time */
      startTime?: string | null;
      metadata?: Record<string, unknown> | null;
      input?: Record<string, unknown> | null;
      output?: Record<string, unknown> | null;
      level?: components["schemas"]["ObservationLevel"];
      statusMessage?: string | null;
      parentObservationId?: string | null;
      version?: string | null;
    };
    /** CreateSpanRequest */
    CreateSpanRequest: {
      /** Format: date-time */
      endTime?: string | null;
    } & components["schemas"]["CreateEventRequest"];
    /** CreateGenerationRequest */
    CreateGenerationRequest: {
      /** Format: date-time */
      completionStartTime?: string | null;
      model?: string | null;
      modelParameters?: {
        [key: string]: components["schemas"]["MapValue"] | undefined;
      } | null;
      prompt?: Record<string, unknown> | null;
      completion?: Record<string, unknown> | null;
      usage?: components["schemas"]["LLMUsage"];
    } & components["schemas"]["CreateSpanRequest"];
    /** Trace */
    Trace: {
      /** @description The unique identifier of a trace */
      id: string;
      /** Format: date-time */
      timestamp: string;
      name?: string | null;
      release?: string | null;
      version?: string | null;
      userId?: string | null;
      metadata?: Record<string, unknown> | null;
    };
    /** TraceWithDetails */
    TraceWithDetails: WithRequired<
      {
        /** @description List of observation ids */
        observations: string[];
        /** @description List of score ids */
        scores: string[];
      } & components["schemas"]["Trace"],
      "observations" | "scores"
    >;
    /** TraceWithFullDetails */
    TraceWithFullDetails: WithRequired<
      {
        observations: components["schemas"]["Observation"][];
        scores: components["schemas"]["Score"][];
      } & components["schemas"]["Trace"],
      "observations" | "scores"
    >;
    /** Observation */
    Observation: {
      id: string;
      traceId?: string | null;
      type: string;
      name?: string | null;
      /** Format: date-time */
      startTime: string;
      /** Format: date-time */
      endTime?: string | null;
      /** Format: date-time */
      completionStartTime?: string | null;
      model?: string | null;
      modelParameters?: {
        [key: string]: components["schemas"]["MapValue"] | undefined;
      } | null;
      input?: Record<string, unknown> | null;
      version?: string | null;
      metadata?: Record<string, unknown> | null;
      output?: Record<string, unknown> | null;
      promptTokens: number;
      completionTokens: number;
      totalTokens: number;
      level: components["schemas"]["ObservationLevel"];
      statusMessage?: string | null;
      parentObservationId?: string | null;
    };
    /** Score */
    Score: {
      id: string;
      traceId: string;
      name: string;
      /** Format: double */
      value: number;
      observationId?: string | null;
      /** Format: date-time */
      timestamp: string;
      comment?: string | null;
    };
    /** Dataset */
    Dataset: {
      id: string;
      name: string;
      status: components["schemas"]["DatasetStatus"];
      projectId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      items: components["schemas"]["DatasetItem"][];
      runs: string[];
    };
    /** DatasetItem */
    DatasetItem: {
      id: string;
      status: components["schemas"]["DatasetStatus"];
      input: unknown;
      expectedOutput?: Record<string, unknown> | null;
      sourceObservationId?: string | null;
      datasetId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    /** DatasetRunItem */
    DatasetRunItem: {
      id: string;
      datasetRunId: string;
      datasetItemId: string;
      observationId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    /** DatasetRun */
    DatasetRun: {
      id: string;
      name: string;
      datasetId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      datasetRunItems: components["schemas"]["DatasetRunItem"][];
    };
    /**
     * ObservationLevel
     * @enum {string}
     */
    ObservationLevel: "DEBUG" | "DEFAULT" | "WARNING" | "ERROR";
    /** MapValue */
    MapValue: (string | null) | (number | null) | (boolean | null);
    /** LLMUsage */
    LLMUsage: {
      promptTokens?: number | null;
      completionTokens?: number | null;
      totalTokens?: number | null;
    };
    /**
     * DatasetStatus
     * @enum {string}
     */
    DatasetStatus: "ACTIVE" | "ARCHIVED";
    /** CreateDatasetItemRequest */
    CreateDatasetItemRequest: {
      datasetName: string;
      input: unknown;
      expectedOutput?: Record<string, unknown> | null;
      id?: string | null;
    };
    /** CreateDatasetRunItemRequest */
    CreateDatasetRunItemRequest: {
      runName: string;
      datasetItemId: string;
      observationId: string;
    };
    /** CreateDatasetRequest */
    CreateDatasetRequest: {
      name: string;
    };
    /** UpdateGenerationRequest */
    UpdateGenerationRequest: {
      generationId: string;
      traceId?: string | null;
      name?: string | null;
      /** Format: date-time */
      startTime?: string | null;
      /** Format: date-time */
      endTime?: string | null;
      /** Format: date-time */
      completionStartTime?: string | null;
      model?: string | null;
      modelParameters?: {
        [key: string]: components["schemas"]["MapValue"] | undefined;
      } | null;
      prompt?: Record<string, unknown> | null;
      version?: string | null;
      metadata?: Record<string, unknown> | null;
      completion?: Record<string, unknown> | null;
      usage?: components["schemas"]["LLMUsage"];
      level?: components["schemas"]["ObservationLevel"];
      statusMessage?: string | null;
    };
    /** IngestionEvent */
    IngestionEvent: OneOf<
      [
        WithRequired<
          {
            /** @enum {string} */
            type?: "trace-create";
          } & components["schemas"]["TraceEvent"],
          "type"
        >,
        WithRequired<
          {
            /** @enum {string} */
            type?: "score-create";
          } & components["schemas"]["ScoreEvent"],
          "type"
        >,
        WithRequired<
          {
            /** @enum {string} */
            type?: "observation-create";
          } & components["schemas"]["ObservationCreateEvent"],
          "type"
        >,
        WithRequired<
          {
            /** @enum {string} */
            type?: "observation-update";
          } & components["schemas"]["ObservationUpdateEvent"],
          "type"
        >,
      ]
    >;
    /** TraceEvent */
    TraceEvent: {
      id: string;
      timestamp: string;
      body: components["schemas"]["Trace"];
    };
    /** ObservationCreateEvent */
    ObservationCreateEvent: {
      id: string;
      timestamp: string;
      body: components["schemas"]["Observation"];
    };
    /** ObservationUpdateEvent */
    ObservationUpdateEvent: {
      id: string;
      timestamp: string;
      body: components["schemas"]["Observation"];
    };
    /** ScoreEvent */
    ScoreEvent: {
      id: string;
      timestamp: string;
      body: components["schemas"]["Score"];
    };
    /** Observations */
    Observations: {
      data: components["schemas"]["Observation"][];
      meta: components["schemas"]["utilsMetaResponse"];
    };
    /** Projects */
    Projects: {
      data: components["schemas"]["Project"][];
    };
    /** Project */
    Project: {
      id: string;
      name: string;
    };
    /** CreateScoreRequest */
    CreateScoreRequest: {
      id?: string | null;
      traceId: string;
      name: string;
      /** Format: double */
      value: number;
      observationId?: string | null;
      comment?: string | null;
    };
    /** Scores */
    Scores: {
      data: components["schemas"]["Score"][];
      meta: components["schemas"]["utilsMetaResponse"];
    };
    /** UpdateSpanRequest */
    UpdateSpanRequest: {
      spanId: string;
      traceId?: string | null;
      /** Format: date-time */
      startTime?: string | null;
      /** Format: date-time */
      endTime?: string | null;
      name?: string | null;
      metadata?: Record<string, unknown> | null;
      input?: Record<string, unknown> | null;
      output?: Record<string, unknown> | null;
      level?: components["schemas"]["ObservationLevel"];
      version?: string | null;
      statusMessage?: string | null;
    };
    /** CreateTraceRequest */
    CreateTraceRequest: {
      id?: string | null;
      name?: string | null;
      userId?: string | null;
      externalId?: string | null;
      release?: string | null;
      version?: string | null;
      metadata?: Record<string, unknown> | null;
    };
    /** Traces */
    Traces: {
      data: components["schemas"]["TraceWithDetails"][];
      meta: components["schemas"]["utilsMetaResponse"];
    };
    /** utilsMetaResponse */
    utilsMetaResponse: {
      /** @description current page number */
      page: number;
      /** @description number of items per page */
      limit: number;
      /** @description number of total items given the current filters/selection (if any) */
      totalItems: number;
      /** @description number of total pages given the current limit */
      totalPages: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
  /** @description Create a dataset item, upserts on id */
  datasetItems_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDatasetItemRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DatasetItem"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Get a specific dataset item */
  datasetItems_get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DatasetItem"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Create a dataset run item */
  datasetRunItems_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDatasetRunItemRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DatasetRunItem"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Get a dataset and its items */
  datasets_get: {
    parameters: {
      path: {
        datasetName: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Dataset"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Create a dataset */
  datasets_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDatasetRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Dataset"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Get a dataset run and its items */
  datasets_getRuns: {
    parameters: {
      path: {
        datasetName: string;
        runName: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DatasetRun"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Add an event to the database */
  event_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEventRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Observation"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  generations_log: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateGenerationRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Observation"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  generations_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateGenerationRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Observation"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Check health of API and database */
  health_health: {
    responses: {
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
      503: {
        content: never;
      };
    };
  };
  /** @description Ingest multiple events to Langfuse */
  ingestion_batch: {
    requestBody: {
      content: {
        "application/json": {
          batch: components["schemas"]["IngestionEvent"][];
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Score"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Get a specific observation */
  observations_get: {
    parameters: {
      path: {
        /** @description The unique langfuse identifier of an observation, can be an event, span or generation */
        observationId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Observation"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Get a list of observations */
  observations_getMany: {
    parameters: {
      query?: {
        page?: number | null;
        limit?: number | null;
        name?: string | null;
        userId?: string | null;
        type?: string | null;
        traceId?: string | null;
        parentObservationId?: string | null;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Observations"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  projects_get: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Projects"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Get scores */
  score_get: {
    parameters: {
      query?: {
        page?: number | null;
        limit?: number | null;
        userId?: string | null;
        name?: string | null;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Scores"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Add a score to the database, upserts on id */
  score_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateScoreRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Score"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Add a span to the database */
  span_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSpanRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Observation"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Update a span to the database */
  span_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSpanRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Observation"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Get list of traces */
  trace_list: {
    parameters: {
      query?: {
        page?: number | null;
        limit?: number | null;
        userId?: string | null;
        name?: string | null;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Traces"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Add a trace to the database */
  trace_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTraceRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Trace"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Get a specific trace */
  trace_get: {
    parameters: {
      path: {
        /** @description The unique langfuse identifier of a trace */
        traceId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TraceWithFullDetails"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      401: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      405: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
