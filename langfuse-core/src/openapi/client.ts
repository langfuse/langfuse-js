/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/public/scores": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Add a score to the database, upserts on id */
    post: operations["score_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** CreateScoreRequest */
    CreateScoreRequest: {
      id?: string;
      /** @example cdef-1234-5678-90ab */
      traceId: string;
      /** @example novelty */
      name: string;
      /** @description The value of the score. Must be passed as string for categorical scores, and numeric for boolean and numeric scores. Boolean score values must equal either 1 or 0 (true or false) */
      value: components["schemas"]["CreateScoreValue"];
      observationId?: string;
      comment?: string;
      /** @description When set, must match the score value's type. If not set, will be inferred from the score value or config */
      dataType?: components["schemas"]["ScoreDataType"];
      /** @description Reference a score config on a score. When set, the score name must equal the config name and scores must comply with the config's range and data type. For categorical scores, the value must map to a config category. Numeric scores might be constrained by the score config's max and min values */
      configId?: string;
    };
    /** BaseScore */
    BaseScore: {
      id: string;
      traceId: string;
      name: string;
      source: components["schemas"]["ScoreSource"];
      observationId?: string;
      /** Format: date-time */
      timestamp: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      authorUserId?: string;
      comment?: string;
      /** @description Reference a score config on a score. When set, config and score name must be equal and value must comply to optionally defined numerical range */
      configId?: string;
    };
    /** NumericScore */
    NumericScore: {
      /**
       * Format: double
       * @description The numeric value of the score
       */
      value: number;
    } & components["schemas"]["BaseScore"];
    /** BooleanScore */
    BooleanScore: {
      /**
       * Format: double
       * @description The numeric value of the score. Equals 1 for "True" and 0 for "False"
       */
      value: number;
      /** @description The string representation of the score value. Is inferred from the numeric value and equals "True" or "False" */
      stringValue: string;
    } & components["schemas"]["BaseScore"];
    /** CategoricalScore */
    CategoricalScore: {
      /**
       * Format: double
       * @description Only defined if a config is linked. Represents the numeric category mapping of the stringValue
       */
      value?: number;
      /** @description The string representation of the score value. If no config is linked, can be any string. Otherwise, must map to a config category */
      stringValue: string;
    } & components["schemas"]["BaseScore"];
    /** Score */
    Score:
      | ({
          /** @enum {string} */
          dataType: "NUMERIC";
        } & components["schemas"]["NumericScore"])
      | ({
          /** @enum {string} */
          dataType: "CATEGORICAL";
        } & components["schemas"]["CategoricalScore"])
      | ({
          /** @enum {string} */
          dataType: "BOOLEAN";
        } & components["schemas"]["BooleanScore"]);
    /**
     * ScoreSource
     * @enum {string}
     */
    ScoreSource: "ANNOTATION" | "API" | "EVAL";
    /**
     * ScoreDataType
     * @enum {string}
     */
    ScoreDataType: "NUMERIC" | "CATEGORICAL" | "BOOLEAN";
    /**
     * CreateScoreValue
     * @description The value of the score. Must be passed as string for categorical scores, and numeric for boolean and numeric scores
     */
    CreateScoreValue: number | string;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  score_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateScoreRequest"];
      };
    };
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      405: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
}
