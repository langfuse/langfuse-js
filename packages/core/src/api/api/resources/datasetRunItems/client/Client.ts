/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as LangfuseAPI from "../../../index.js";
import {
  mergeHeaders,
  mergeOnlyDefinedHeaders,
} from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace DatasetRunItems {
  export interface Options {
    environment: core.Supplier<string>;
    /** Specify a custom URL to connect the client to. */
    baseUrl?: core.Supplier<string>;
    username?: core.Supplier<string | undefined>;
    password?: core.Supplier<string | undefined>;
    /** Override the X-Langfuse-Sdk-Name header */
    xLangfuseSdkName?: core.Supplier<string | undefined>;
    /** Override the X-Langfuse-Sdk-Version header */
    xLangfuseSdkVersion?: core.Supplier<string | undefined>;
    /** Override the X-Langfuse-Public-Key header */
    xLangfusePublicKey?: core.Supplier<string | undefined>;
    /** Additional headers to include in requests. */
    headers?: Record<
      string,
      string | core.Supplier<string | null | undefined> | null | undefined
    >;
  }

  export interface RequestOptions {
    /** The maximum time to wait for a response in seconds. */
    timeoutInSeconds?: number;
    /** The number of times to retry the request. Defaults to 2. */
    maxRetries?: number;
    /** A hook to abort the request. */
    abortSignal?: AbortSignal;
    /** Override the X-Langfuse-Sdk-Name header */
    xLangfuseSdkName?: string | undefined;
    /** Override the X-Langfuse-Sdk-Version header */
    xLangfuseSdkVersion?: string | undefined;
    /** Override the X-Langfuse-Public-Key header */
    xLangfusePublicKey?: string | undefined;
    /** Additional query string parameters to include in the request. */
    queryParams?: Record<string, unknown>;
    /** Additional headers to include in the request. */
    headers?: Record<
      string,
      string | core.Supplier<string | null | undefined> | null | undefined
    >;
  }
}

export class DatasetRunItems {
  protected readonly _options: DatasetRunItems.Options;

  constructor(_options: DatasetRunItems.Options) {
    this._options = _options;
  }

  /**
   * Create a dataset run item
   *
   * @param {LangfuseAPI.CreateDatasetRunItemRequest} request
   * @param {DatasetRunItems.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @throws {@link LangfuseAPI.Error}
   * @throws {@link LangfuseAPI.UnauthorizedError}
   * @throws {@link LangfuseAPI.AccessDeniedError}
   * @throws {@link LangfuseAPI.MethodNotAllowedError}
   * @throws {@link LangfuseAPI.NotFoundError}
   *
   * @example
   *     await client.datasetRunItems.create({
   *         runName: "runName",
   *         runDescription: undefined,
   *         metadata: undefined,
   *         datasetItemId: "datasetItemId",
   *         observationId: undefined,
   *         traceId: undefined
   *     })
   */
  public create(
    request: LangfuseAPI.CreateDatasetRunItemRequest,
    requestOptions?: DatasetRunItems.RequestOptions,
  ): core.HttpResponsePromise<LangfuseAPI.DatasetRunItem> {
    return core.HttpResponsePromise.fromPromise(
      this.__create(request, requestOptions),
    );
  }

  private async __create(
    request: LangfuseAPI.CreateDatasetRunItemRequest,
    requestOptions?: DatasetRunItems.RequestOptions,
  ): Promise<core.WithRawResponse<LangfuseAPI.DatasetRunItem>> {
    let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
      this._options?.headers,
      mergeOnlyDefinedHeaders({
        Authorization: await this._getAuthorizationHeader(),
        "X-Langfuse-Sdk-Name":
          requestOptions?.xLangfuseSdkName ?? this._options?.xLangfuseSdkName,
        "X-Langfuse-Sdk-Version":
          requestOptions?.xLangfuseSdkVersion ??
          this._options?.xLangfuseSdkVersion,
        "X-Langfuse-Public-Key":
          requestOptions?.xLangfusePublicKey ??
          this._options?.xLangfusePublicKey,
      }),
      requestOptions?.headers,
    );
    const _response = await core.fetcher({
      url: core.url.join(
        (await core.Supplier.get(this._options.baseUrl)) ??
          (await core.Supplier.get(this._options.environment)),
        "/api/public/dataset-run-items",
      ),
      method: "POST",
      headers: _headers,
      contentType: "application/json",
      queryParameters: requestOptions?.queryParams,
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return {
        data: _response.body as LangfuseAPI.DatasetRunItem,
        rawResponse: _response.rawResponse,
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 400:
          throw new LangfuseAPI.Error(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 401:
          throw new LangfuseAPI.UnauthorizedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 403:
          throw new LangfuseAPI.AccessDeniedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 405:
          throw new LangfuseAPI.MethodNotAllowedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 404:
          throw new LangfuseAPI.NotFoundError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        default:
          throw new errors.LangfuseAPIError({
            statusCode: _response.error.statusCode,
            body: _response.error.body,
            rawResponse: _response.rawResponse,
          });
      }
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.LangfuseAPIError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
          rawResponse: _response.rawResponse,
        });
      case "timeout":
        throw new errors.LangfuseAPITimeoutError(
          "Timeout exceeded when calling POST /api/public/dataset-run-items.",
        );
      case "unknown":
        throw new errors.LangfuseAPIError({
          message: _response.error.errorMessage,
          rawResponse: _response.rawResponse,
        });
    }
  }

  /**
   * List dataset run items
   *
   * @param {LangfuseAPI.ListDatasetRunItemsRequest} request
   * @param {DatasetRunItems.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @throws {@link LangfuseAPI.Error}
   * @throws {@link LangfuseAPI.UnauthorizedError}
   * @throws {@link LangfuseAPI.AccessDeniedError}
   * @throws {@link LangfuseAPI.MethodNotAllowedError}
   * @throws {@link LangfuseAPI.NotFoundError}
   *
   * @example
   *     await client.datasetRunItems.list({
   *         datasetId: "datasetId",
   *         runName: "runName"
   *     })
   */
  public list(
    request: LangfuseAPI.ListDatasetRunItemsRequest,
    requestOptions?: DatasetRunItems.RequestOptions,
  ): core.HttpResponsePromise<LangfuseAPI.PaginatedDatasetRunItems> {
    return core.HttpResponsePromise.fromPromise(
      this.__list(request, requestOptions),
    );
  }

  private async __list(
    request: LangfuseAPI.ListDatasetRunItemsRequest,
    requestOptions?: DatasetRunItems.RequestOptions,
  ): Promise<core.WithRawResponse<LangfuseAPI.PaginatedDatasetRunItems>> {
    const { datasetId, runName, page, limit } = request;
    const _queryParams: Record<
      string,
      string | string[] | object | object[] | null
    > = {};
    _queryParams["datasetId"] = datasetId;
    _queryParams["runName"] = runName;
    if (page != null) {
      _queryParams["page"] = page.toString();
    }

    if (limit != null) {
      _queryParams["limit"] = limit.toString();
    }

    let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
      this._options?.headers,
      mergeOnlyDefinedHeaders({
        Authorization: await this._getAuthorizationHeader(),
        "X-Langfuse-Sdk-Name":
          requestOptions?.xLangfuseSdkName ?? this._options?.xLangfuseSdkName,
        "X-Langfuse-Sdk-Version":
          requestOptions?.xLangfuseSdkVersion ??
          this._options?.xLangfuseSdkVersion,
        "X-Langfuse-Public-Key":
          requestOptions?.xLangfusePublicKey ??
          this._options?.xLangfusePublicKey,
      }),
      requestOptions?.headers,
    );
    const _response = await core.fetcher({
      url: core.url.join(
        (await core.Supplier.get(this._options.baseUrl)) ??
          (await core.Supplier.get(this._options.environment)),
        "/api/public/dataset-run-items",
      ),
      method: "GET",
      headers: _headers,
      queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return {
        data: _response.body as LangfuseAPI.PaginatedDatasetRunItems,
        rawResponse: _response.rawResponse,
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 400:
          throw new LangfuseAPI.Error(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 401:
          throw new LangfuseAPI.UnauthorizedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 403:
          throw new LangfuseAPI.AccessDeniedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 405:
          throw new LangfuseAPI.MethodNotAllowedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 404:
          throw new LangfuseAPI.NotFoundError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        default:
          throw new errors.LangfuseAPIError({
            statusCode: _response.error.statusCode,
            body: _response.error.body,
            rawResponse: _response.rawResponse,
          });
      }
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.LangfuseAPIError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
          rawResponse: _response.rawResponse,
        });
      case "timeout":
        throw new errors.LangfuseAPITimeoutError(
          "Timeout exceeded when calling GET /api/public/dataset-run-items.",
        );
      case "unknown":
        throw new errors.LangfuseAPIError({
          message: _response.error.errorMessage,
          rawResponse: _response.rawResponse,
        });
    }
  }

  protected async _getAuthorizationHeader(): Promise<string | undefined> {
    const username = await core.Supplier.get(this._options.username);
    const password = await core.Supplier.get(this._options.password);
    if (username != null && password != null) {
      return core.BasicAuth.toAuthorizationHeader({
        username: username,
        password: password,
      });
    }

    return undefined;
  }
}
