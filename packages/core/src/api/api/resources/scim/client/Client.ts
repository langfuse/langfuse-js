/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as LangfuseAPI from "../../../index.js";
import {
  mergeHeaders,
  mergeOnlyDefinedHeaders,
} from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Scim {
  export interface Options {
    environment: core.Supplier<string>;
    /** Specify a custom URL to connect the client to. */
    baseUrl?: core.Supplier<string>;
    username?: core.Supplier<string | undefined>;
    password?: core.Supplier<string | undefined>;
    /** Override the X-Langfuse-Sdk-Name header */
    xLangfuseSdkName?: core.Supplier<string | undefined>;
    /** Override the X-Langfuse-Sdk-Version header */
    xLangfuseSdkVersion?: core.Supplier<string | undefined>;
    /** Override the X-Langfuse-Public-Key header */
    xLangfusePublicKey?: core.Supplier<string | undefined>;
    /** Additional headers to include in requests. */
    headers?: Record<
      string,
      string | core.Supplier<string | undefined> | undefined
    >;
  }

  export interface RequestOptions {
    /** The maximum time to wait for a response in seconds. */
    timeoutInSeconds?: number;
    /** The number of times to retry the request. Defaults to 2. */
    maxRetries?: number;
    /** A hook to abort the request. */
    abortSignal?: AbortSignal;
    /** Override the X-Langfuse-Sdk-Name header */
    xLangfuseSdkName?: string | undefined;
    /** Override the X-Langfuse-Sdk-Version header */
    xLangfuseSdkVersion?: string | undefined;
    /** Override the X-Langfuse-Public-Key header */
    xLangfusePublicKey?: string | undefined;
    /** Additional query string parameters to include in the request. */
    queryParams?: Record<string, unknown>;
    /** Additional headers to include in the request. */
    headers?: Record<
      string,
      string | core.Supplier<string | undefined> | undefined
    >;
  }
}

export class Scim {
  protected readonly _options: Scim.Options;

  constructor(_options: Scim.Options) {
    this._options = _options;
  }

  /**
   * Get SCIM Service Provider Configuration (requires organization-scoped API key)
   *
   * @param {Scim.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @throws {@link LangfuseAPI.Error}
   * @throws {@link LangfuseAPI.UnauthorizedError}
   * @throws {@link LangfuseAPI.AccessDeniedError}
   * @throws {@link LangfuseAPI.MethodNotAllowedError}
   * @throws {@link LangfuseAPI.NotFoundError}
   *
   * @example
   *     await client.scim.getServiceProviderConfig()
   */
  public getServiceProviderConfig(
    requestOptions?: Scim.RequestOptions,
  ): core.HttpResponsePromise<LangfuseAPI.ServiceProviderConfig> {
    return core.HttpResponsePromise.fromPromise(
      this.__getServiceProviderConfig(requestOptions),
    );
  }

  private async __getServiceProviderConfig(
    requestOptions?: Scim.RequestOptions,
  ): Promise<core.WithRawResponse<LangfuseAPI.ServiceProviderConfig>> {
    const _response = await core.fetcher({
      url: core.url.join(
        (await core.Supplier.get(this._options.baseUrl)) ??
          (await core.Supplier.get(this._options.environment)),
        "/api/public/scim/ServiceProviderConfig",
      ),
      method: "GET",
      headers: mergeHeaders(
        this._options?.headers,
        mergeOnlyDefinedHeaders({
          Authorization: await this._getAuthorizationHeader(),
          "X-Langfuse-Sdk-Name": requestOptions?.xLangfuseSdkName,
          "X-Langfuse-Sdk-Version": requestOptions?.xLangfuseSdkVersion,
          "X-Langfuse-Public-Key": requestOptions?.xLangfusePublicKey,
        }),
        requestOptions?.headers,
      ),
      queryParameters: requestOptions?.queryParams,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return {
        data: _response.body as LangfuseAPI.ServiceProviderConfig,
        rawResponse: _response.rawResponse,
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 400:
          throw new LangfuseAPI.Error(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 401:
          throw new LangfuseAPI.UnauthorizedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 403:
          throw new LangfuseAPI.AccessDeniedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 405:
          throw new LangfuseAPI.MethodNotAllowedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 404:
          throw new LangfuseAPI.NotFoundError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        default:
          throw new errors.LangfuseAPIError({
            statusCode: _response.error.statusCode,
            body: _response.error.body,
            rawResponse: _response.rawResponse,
          });
      }
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.LangfuseAPIError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
          rawResponse: _response.rawResponse,
        });
      case "timeout":
        throw new errors.LangfuseAPITimeoutError(
          "Timeout exceeded when calling GET /api/public/scim/ServiceProviderConfig.",
        );
      case "unknown":
        throw new errors.LangfuseAPIError({
          message: _response.error.errorMessage,
          rawResponse: _response.rawResponse,
        });
    }
  }

  /**
   * Get SCIM Resource Types (requires organization-scoped API key)
   *
   * @param {Scim.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @throws {@link LangfuseAPI.Error}
   * @throws {@link LangfuseAPI.UnauthorizedError}
   * @throws {@link LangfuseAPI.AccessDeniedError}
   * @throws {@link LangfuseAPI.MethodNotAllowedError}
   * @throws {@link LangfuseAPI.NotFoundError}
   *
   * @example
   *     await client.scim.getResourceTypes()
   */
  public getResourceTypes(
    requestOptions?: Scim.RequestOptions,
  ): core.HttpResponsePromise<LangfuseAPI.ResourceTypesResponse> {
    return core.HttpResponsePromise.fromPromise(
      this.__getResourceTypes(requestOptions),
    );
  }

  private async __getResourceTypes(
    requestOptions?: Scim.RequestOptions,
  ): Promise<core.WithRawResponse<LangfuseAPI.ResourceTypesResponse>> {
    const _response = await core.fetcher({
      url: core.url.join(
        (await core.Supplier.get(this._options.baseUrl)) ??
          (await core.Supplier.get(this._options.environment)),
        "/api/public/scim/ResourceTypes",
      ),
      method: "GET",
      headers: mergeHeaders(
        this._options?.headers,
        mergeOnlyDefinedHeaders({
          Authorization: await this._getAuthorizationHeader(),
          "X-Langfuse-Sdk-Name": requestOptions?.xLangfuseSdkName,
          "X-Langfuse-Sdk-Version": requestOptions?.xLangfuseSdkVersion,
          "X-Langfuse-Public-Key": requestOptions?.xLangfusePublicKey,
        }),
        requestOptions?.headers,
      ),
      queryParameters: requestOptions?.queryParams,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return {
        data: _response.body as LangfuseAPI.ResourceTypesResponse,
        rawResponse: _response.rawResponse,
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 400:
          throw new LangfuseAPI.Error(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 401:
          throw new LangfuseAPI.UnauthorizedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 403:
          throw new LangfuseAPI.AccessDeniedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 405:
          throw new LangfuseAPI.MethodNotAllowedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 404:
          throw new LangfuseAPI.NotFoundError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        default:
          throw new errors.LangfuseAPIError({
            statusCode: _response.error.statusCode,
            body: _response.error.body,
            rawResponse: _response.rawResponse,
          });
      }
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.LangfuseAPIError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
          rawResponse: _response.rawResponse,
        });
      case "timeout":
        throw new errors.LangfuseAPITimeoutError(
          "Timeout exceeded when calling GET /api/public/scim/ResourceTypes.",
        );
      case "unknown":
        throw new errors.LangfuseAPIError({
          message: _response.error.errorMessage,
          rawResponse: _response.rawResponse,
        });
    }
  }

  /**
   * Get SCIM Schemas (requires organization-scoped API key)
   *
   * @param {Scim.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @throws {@link LangfuseAPI.Error}
   * @throws {@link LangfuseAPI.UnauthorizedError}
   * @throws {@link LangfuseAPI.AccessDeniedError}
   * @throws {@link LangfuseAPI.MethodNotAllowedError}
   * @throws {@link LangfuseAPI.NotFoundError}
   *
   * @example
   *     await client.scim.getSchemas()
   */
  public getSchemas(
    requestOptions?: Scim.RequestOptions,
  ): core.HttpResponsePromise<LangfuseAPI.SchemasResponse> {
    return core.HttpResponsePromise.fromPromise(
      this.__getSchemas(requestOptions),
    );
  }

  private async __getSchemas(
    requestOptions?: Scim.RequestOptions,
  ): Promise<core.WithRawResponse<LangfuseAPI.SchemasResponse>> {
    const _response = await core.fetcher({
      url: core.url.join(
        (await core.Supplier.get(this._options.baseUrl)) ??
          (await core.Supplier.get(this._options.environment)),
        "/api/public/scim/Schemas",
      ),
      method: "GET",
      headers: mergeHeaders(
        this._options?.headers,
        mergeOnlyDefinedHeaders({
          Authorization: await this._getAuthorizationHeader(),
          "X-Langfuse-Sdk-Name": requestOptions?.xLangfuseSdkName,
          "X-Langfuse-Sdk-Version": requestOptions?.xLangfuseSdkVersion,
          "X-Langfuse-Public-Key": requestOptions?.xLangfusePublicKey,
        }),
        requestOptions?.headers,
      ),
      queryParameters: requestOptions?.queryParams,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return {
        data: _response.body as LangfuseAPI.SchemasResponse,
        rawResponse: _response.rawResponse,
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 400:
          throw new LangfuseAPI.Error(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 401:
          throw new LangfuseAPI.UnauthorizedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 403:
          throw new LangfuseAPI.AccessDeniedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 405:
          throw new LangfuseAPI.MethodNotAllowedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 404:
          throw new LangfuseAPI.NotFoundError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        default:
          throw new errors.LangfuseAPIError({
            statusCode: _response.error.statusCode,
            body: _response.error.body,
            rawResponse: _response.rawResponse,
          });
      }
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.LangfuseAPIError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
          rawResponse: _response.rawResponse,
        });
      case "timeout":
        throw new errors.LangfuseAPITimeoutError(
          "Timeout exceeded when calling GET /api/public/scim/Schemas.",
        );
      case "unknown":
        throw new errors.LangfuseAPIError({
          message: _response.error.errorMessage,
          rawResponse: _response.rawResponse,
        });
    }
  }

  /**
   * List users in the organization (requires organization-scoped API key)
   *
   * @param {LangfuseAPI.ListUsersRequest} request
   * @param {Scim.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @throws {@link LangfuseAPI.Error}
   * @throws {@link LangfuseAPI.UnauthorizedError}
   * @throws {@link LangfuseAPI.AccessDeniedError}
   * @throws {@link LangfuseAPI.MethodNotAllowedError}
   * @throws {@link LangfuseAPI.NotFoundError}
   *
   * @example
   *     await client.scim.listUsers()
   */
  public listUsers(
    request: LangfuseAPI.ListUsersRequest = {},
    requestOptions?: Scim.RequestOptions,
  ): core.HttpResponsePromise<LangfuseAPI.ScimUsersListResponse> {
    return core.HttpResponsePromise.fromPromise(
      this.__listUsers(request, requestOptions),
    );
  }

  private async __listUsers(
    request: LangfuseAPI.ListUsersRequest = {},
    requestOptions?: Scim.RequestOptions,
  ): Promise<core.WithRawResponse<LangfuseAPI.ScimUsersListResponse>> {
    const { filter, startIndex, count } = request;
    const _queryParams: Record<
      string,
      string | string[] | object | object[] | null
    > = {};
    if (filter != null) {
      _queryParams["filter"] = filter;
    }

    if (startIndex != null) {
      _queryParams["startIndex"] = startIndex.toString();
    }

    if (count != null) {
      _queryParams["count"] = count.toString();
    }

    const _response = await core.fetcher({
      url: core.url.join(
        (await core.Supplier.get(this._options.baseUrl)) ??
          (await core.Supplier.get(this._options.environment)),
        "/api/public/scim/Users",
      ),
      method: "GET",
      headers: mergeHeaders(
        this._options?.headers,
        mergeOnlyDefinedHeaders({
          Authorization: await this._getAuthorizationHeader(),
          "X-Langfuse-Sdk-Name": requestOptions?.xLangfuseSdkName,
          "X-Langfuse-Sdk-Version": requestOptions?.xLangfuseSdkVersion,
          "X-Langfuse-Public-Key": requestOptions?.xLangfusePublicKey,
        }),
        requestOptions?.headers,
      ),
      queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return {
        data: _response.body as LangfuseAPI.ScimUsersListResponse,
        rawResponse: _response.rawResponse,
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 400:
          throw new LangfuseAPI.Error(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 401:
          throw new LangfuseAPI.UnauthorizedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 403:
          throw new LangfuseAPI.AccessDeniedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 405:
          throw new LangfuseAPI.MethodNotAllowedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 404:
          throw new LangfuseAPI.NotFoundError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        default:
          throw new errors.LangfuseAPIError({
            statusCode: _response.error.statusCode,
            body: _response.error.body,
            rawResponse: _response.rawResponse,
          });
      }
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.LangfuseAPIError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
          rawResponse: _response.rawResponse,
        });
      case "timeout":
        throw new errors.LangfuseAPITimeoutError(
          "Timeout exceeded when calling GET /api/public/scim/Users.",
        );
      case "unknown":
        throw new errors.LangfuseAPIError({
          message: _response.error.errorMessage,
          rawResponse: _response.rawResponse,
        });
    }
  }

  /**
   * Create a new user in the organization (requires organization-scoped API key)
   *
   * @param {LangfuseAPI.CreateUserRequest} request
   * @param {Scim.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @throws {@link LangfuseAPI.Error}
   * @throws {@link LangfuseAPI.UnauthorizedError}
   * @throws {@link LangfuseAPI.AccessDeniedError}
   * @throws {@link LangfuseAPI.MethodNotAllowedError}
   * @throws {@link LangfuseAPI.NotFoundError}
   *
   * @example
   *     await client.scim.createUser({
   *         userName: "userName",
   *         name: {
   *             formatted: undefined
   *         },
   *         emails: undefined,
   *         active: undefined,
   *         password: undefined
   *     })
   */
  public createUser(
    request: LangfuseAPI.CreateUserRequest,
    requestOptions?: Scim.RequestOptions,
  ): core.HttpResponsePromise<LangfuseAPI.ScimUser> {
    return core.HttpResponsePromise.fromPromise(
      this.__createUser(request, requestOptions),
    );
  }

  private async __createUser(
    request: LangfuseAPI.CreateUserRequest,
    requestOptions?: Scim.RequestOptions,
  ): Promise<core.WithRawResponse<LangfuseAPI.ScimUser>> {
    const _response = await core.fetcher({
      url: core.url.join(
        (await core.Supplier.get(this._options.baseUrl)) ??
          (await core.Supplier.get(this._options.environment)),
        "/api/public/scim/Users",
      ),
      method: "POST",
      headers: mergeHeaders(
        this._options?.headers,
        mergeOnlyDefinedHeaders({
          Authorization: await this._getAuthorizationHeader(),
          "X-Langfuse-Sdk-Name": requestOptions?.xLangfuseSdkName,
          "X-Langfuse-Sdk-Version": requestOptions?.xLangfuseSdkVersion,
          "X-Langfuse-Public-Key": requestOptions?.xLangfusePublicKey,
        }),
        requestOptions?.headers,
      ),
      contentType: "application/json",
      queryParameters: requestOptions?.queryParams,
      requestType: "json",
      body: request,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return {
        data: _response.body as LangfuseAPI.ScimUser,
        rawResponse: _response.rawResponse,
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 400:
          throw new LangfuseAPI.Error(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 401:
          throw new LangfuseAPI.UnauthorizedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 403:
          throw new LangfuseAPI.AccessDeniedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 405:
          throw new LangfuseAPI.MethodNotAllowedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 404:
          throw new LangfuseAPI.NotFoundError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        default:
          throw new errors.LangfuseAPIError({
            statusCode: _response.error.statusCode,
            body: _response.error.body,
            rawResponse: _response.rawResponse,
          });
      }
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.LangfuseAPIError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
          rawResponse: _response.rawResponse,
        });
      case "timeout":
        throw new errors.LangfuseAPITimeoutError(
          "Timeout exceeded when calling POST /api/public/scim/Users.",
        );
      case "unknown":
        throw new errors.LangfuseAPIError({
          message: _response.error.errorMessage,
          rawResponse: _response.rawResponse,
        });
    }
  }

  /**
   * Get a specific user by ID (requires organization-scoped API key)
   *
   * @param {string} userId
   * @param {Scim.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @throws {@link LangfuseAPI.Error}
   * @throws {@link LangfuseAPI.UnauthorizedError}
   * @throws {@link LangfuseAPI.AccessDeniedError}
   * @throws {@link LangfuseAPI.MethodNotAllowedError}
   * @throws {@link LangfuseAPI.NotFoundError}
   *
   * @example
   *     await client.scim.getUser("userId")
   */
  public getUser(
    userId: string,
    requestOptions?: Scim.RequestOptions,
  ): core.HttpResponsePromise<LangfuseAPI.ScimUser> {
    return core.HttpResponsePromise.fromPromise(
      this.__getUser(userId, requestOptions),
    );
  }

  private async __getUser(
    userId: string,
    requestOptions?: Scim.RequestOptions,
  ): Promise<core.WithRawResponse<LangfuseAPI.ScimUser>> {
    const _response = await core.fetcher({
      url: core.url.join(
        (await core.Supplier.get(this._options.baseUrl)) ??
          (await core.Supplier.get(this._options.environment)),
        `/api/public/scim/Users/${encodeURIComponent(userId)}`,
      ),
      method: "GET",
      headers: mergeHeaders(
        this._options?.headers,
        mergeOnlyDefinedHeaders({
          Authorization: await this._getAuthorizationHeader(),
          "X-Langfuse-Sdk-Name": requestOptions?.xLangfuseSdkName,
          "X-Langfuse-Sdk-Version": requestOptions?.xLangfuseSdkVersion,
          "X-Langfuse-Public-Key": requestOptions?.xLangfusePublicKey,
        }),
        requestOptions?.headers,
      ),
      queryParameters: requestOptions?.queryParams,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return {
        data: _response.body as LangfuseAPI.ScimUser,
        rawResponse: _response.rawResponse,
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 400:
          throw new LangfuseAPI.Error(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 401:
          throw new LangfuseAPI.UnauthorizedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 403:
          throw new LangfuseAPI.AccessDeniedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 405:
          throw new LangfuseAPI.MethodNotAllowedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 404:
          throw new LangfuseAPI.NotFoundError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        default:
          throw new errors.LangfuseAPIError({
            statusCode: _response.error.statusCode,
            body: _response.error.body,
            rawResponse: _response.rawResponse,
          });
      }
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.LangfuseAPIError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
          rawResponse: _response.rawResponse,
        });
      case "timeout":
        throw new errors.LangfuseAPITimeoutError(
          "Timeout exceeded when calling GET /api/public/scim/Users/{userId}.",
        );
      case "unknown":
        throw new errors.LangfuseAPIError({
          message: _response.error.errorMessage,
          rawResponse: _response.rawResponse,
        });
    }
  }

  /**
   * Remove a user from the organization (requires organization-scoped API key). Note that this only removes the user from the organization but does not delete the user entity itself.
   *
   * @param {string} userId
   * @param {Scim.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @throws {@link LangfuseAPI.Error}
   * @throws {@link LangfuseAPI.UnauthorizedError}
   * @throws {@link LangfuseAPI.AccessDeniedError}
   * @throws {@link LangfuseAPI.MethodNotAllowedError}
   * @throws {@link LangfuseAPI.NotFoundError}
   *
   * @example
   *     await client.scim.deleteUser("userId")
   */
  public deleteUser(
    userId: string,
    requestOptions?: Scim.RequestOptions,
  ): core.HttpResponsePromise<LangfuseAPI.EmptyResponse> {
    return core.HttpResponsePromise.fromPromise(
      this.__deleteUser(userId, requestOptions),
    );
  }

  private async __deleteUser(
    userId: string,
    requestOptions?: Scim.RequestOptions,
  ): Promise<core.WithRawResponse<LangfuseAPI.EmptyResponse>> {
    const _response = await core.fetcher({
      url: core.url.join(
        (await core.Supplier.get(this._options.baseUrl)) ??
          (await core.Supplier.get(this._options.environment)),
        `/api/public/scim/Users/${encodeURIComponent(userId)}`,
      ),
      method: "DELETE",
      headers: mergeHeaders(
        this._options?.headers,
        mergeOnlyDefinedHeaders({
          Authorization: await this._getAuthorizationHeader(),
          "X-Langfuse-Sdk-Name": requestOptions?.xLangfuseSdkName,
          "X-Langfuse-Sdk-Version": requestOptions?.xLangfuseSdkVersion,
          "X-Langfuse-Public-Key": requestOptions?.xLangfusePublicKey,
        }),
        requestOptions?.headers,
      ),
      queryParameters: requestOptions?.queryParams,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
      abortSignal: requestOptions?.abortSignal,
    });
    if (_response.ok) {
      return {
        data: _response.body as LangfuseAPI.EmptyResponse,
        rawResponse: _response.rawResponse,
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 400:
          throw new LangfuseAPI.Error(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 401:
          throw new LangfuseAPI.UnauthorizedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 403:
          throw new LangfuseAPI.AccessDeniedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 405:
          throw new LangfuseAPI.MethodNotAllowedError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        case 404:
          throw new LangfuseAPI.NotFoundError(
            _response.error.body as unknown,
            _response.rawResponse,
          );
        default:
          throw new errors.LangfuseAPIError({
            statusCode: _response.error.statusCode,
            body: _response.error.body,
            rawResponse: _response.rawResponse,
          });
      }
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.LangfuseAPIError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
          rawResponse: _response.rawResponse,
        });
      case "timeout":
        throw new errors.LangfuseAPITimeoutError(
          "Timeout exceeded when calling DELETE /api/public/scim/Users/{userId}.",
        );
      case "unknown":
        throw new errors.LangfuseAPIError({
          message: _response.error.errorMessage,
          rawResponse: _response.rawResponse,
        });
    }
  }

  protected async _getAuthorizationHeader(): Promise<string | undefined> {
    const username = await core.Supplier.get(this._options.username);
    const password = await core.Supplier.get(this._options.password);
    if (username != null && password != null) {
      return core.BasicAuth.toAuthorizationHeader({
        username: username,
        password: password,
      });
    }

    return undefined;
  }
}
