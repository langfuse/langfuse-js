/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {}
 */
export interface GetTracesRequest {
  /** Page number, starts at 1 */
  page?: number;
  /** Limit of items per page. If you encounter api issues due to too large page sizes, try to reduce the limit. */
  limit?: number;
  userId?: string;
  name?: string;
  sessionId?: string;
  /** Optional filter to only include traces with a trace.timestamp on or after a certain datetime (ISO 8601) */
  fromTimestamp?: string;
  /** Optional filter to only include traces with a trace.timestamp before a certain datetime (ISO 8601) */
  toTimestamp?: string;
  /** Format of the string [field].[asc/desc]. Fields: id, timestamp, name, userId, release, version, public, bookmarked, sessionId. Example: timestamp.asc */
  orderBy?: string;
  /** Only traces that include all of these tags will be returned. */
  tags?: string | string[];
  /** Optional filter to only include traces with a certain version. */
  version?: string;
  /** Optional filter to only include traces with a certain release. */
  release?: string;
  /** Optional filter for traces where the environment is one of the provided values. */
  environment?: string | string[];
  /** Comma-separated list of fields to include in the response. Available field groups: 'core' (always included), 'io' (input, output, metadata), 'scores', 'observations', 'metrics'. If not specified, all fields are returned. Example: 'core,scores,metrics'. Note: Excluded 'observations' or 'scores' fields return empty arrays; excluded 'metrics' returns -1 for 'totalCost' and 'latency'. */
  fields?: string;
  /**
   * JSON string containing an array of filter conditions. When provided, this takes precedence over legacy filter parameters (userId, name, sessionId, tags, version, release, environment, fromTimestamp, toTimestamp).
   * Each filter condition has the following structure:
   * ```json
   * [
   *   {
   *     "type": string,           // Required. One of: "datetime", "string", "number", "stringOptions", "categoryOptions", "arrayOptions", "stringObject", "numberObject", "boolean", "null"
   *     "column": string,         // Required. Column to filter on
   *     "operator": string,       // Required. Operator based on type:
   *                               // - datetime: ">", "<", ">=", "<="
   *                               // - string: "=", "contains", "does not contain", "starts with", "ends with"
   *                               // - stringOptions: "any of", "none of"
   *                               // - categoryOptions: "any of", "none of"
   *                               // - arrayOptions: "any of", "none of", "all of"
   *                               // - number: "=", ">", "<", ">=", "<="
   *                               // - stringObject: "=", "contains", "does not contain", "starts with", "ends with"
   *                               // - numberObject: "=", ">", "<", ">=", "<="
   *                               // - boolean: "=", "<>"
   *                               // - null: "is null", "is not null"
   *     "value": any,             // Required (except for null type). Value to compare against. Type depends on filter type
   *     "key": string             // Required only for stringObject, numberObject, and categoryOptions types when filtering on nested fields like metadata
   *   }
   * ]
   * ```
   */
  filter?: string;
}
