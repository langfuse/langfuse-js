name: CI

on:
  pull_request:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  tests:
    timeout-minutes: 3
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    env:
      LANGFUSE_BASEURL: "http://localhost:3000"
      LANGFUSE_SECRET_KEY: "sk-lf-1234567890"
      LANGFUSE_PUBLIC_KEY: "pk-lf-1234567890"
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    name: Test on Node ${{ matrix.node-version }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: yarn install
      - run: yarn test

  integration-test:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    env:
      LANGFUSE_BASEURL: "http://localhost:3000"
      LANGFUSE_SECRET_KEY: "sk-lf-1234567890"
      LANGFUSE_PUBLIC_KEY: "pk-lf-1234567890"
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      LANGCHAIN_VERSION: 1

    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v3
        with:
          version: 9.5.0

      - name: Clone langfuse server
        run: |
          git clone https://github.com/langfuse/langfuse.git ./langfuse-server

      - name: Cache langfuse server dependencies
        uses: actions/cache@v3
        with:
          path: ./langfuse-server/node_modules
          key: |
            langfuse-server-${{ hashFiles('./langfuse-server/package-lock.json') }}
            langfuse-server-

      - uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Run langfuse server
        run: |
          cd ./langfuse-server

          echo "::group::Run langfuse server"
          TELEMETRY_ENABLED=false docker compose -f docker-compose.v3preview.yml up -d postgres
          echo "::endgroup::"

          echo "::group::Logs from langfuse server"
          TELEMETRY_ENABLED=false docker compose -f docker-compose.v3preview.yml logs
          echo "::endgroup::"

          echo "::group::Install dependencies (necessary to run seeder)"
          pnpm i
          echo "::endgroup::"

          echo "::group::Seed db"
          cp .env.dev.example .env
          pnpm run db:migrate          
          pnpm run db:seed
          rm -rf node_modules
          rm -rf .env

          echo "::group::Run server"
          TELEMETRY_ENABLED=false CLICKHOUSE_CLUSTER_ENABLED=false LANGFUSE_ASYNC_INGESTION_PROCESSING=false LANGFUSE_ASYNC_CLICKHOUSE_INGESTION_PROCESSING=false LANGFUSE_READ_FROM_POSTGRES_ONLY=true LANGFUSE_READ_FROM_CLICKHOUSE_ONLY=false docker compose -f docker-compose.v3preview.yml up -d
          echo "::endgroup::"

      # Add this step to check the health of the container
      - name: Health check for langfuse server
        run: |
          echo "Checking if the langfuse server is up..."
          retry_count=0
          max_retries=10
          until curl --output /dev/null --silent --head --fail http://localhost:3000/api/public/health
          do
            retry_count=`expr $retry_count + 1`
            echo "Attempt $retry_count of $max_retries..."
            if [ $retry_count -ge $max_retries ]; then
              echo "Langfuse server did not respond in time. Printing logs..."
              docker logs langfuse-server-langfuse-web-1
              echo "Failing the step..."
              exit 1
            fi
            sleep 5
          done
          echo "Langfuse server is up and running!"

      - run: yarn install
      - run: yarn compile
      - run: yarn test:integration

  lint:
    timeout-minutes: 3
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - run: yarn install
      - run: yarn compile
      - run: yarn lint
      - run: yarn prettier:check
  all-tests-passed:
    # This allows us to have a branch protection rule for tests and deploys with matrix
    runs-on: ubuntu-latest
    needs: [tests, integration-test, lint]
    if: always()
    steps:
      - name: Successful deploy
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: exit 0
      - name: Failing deploy
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1
